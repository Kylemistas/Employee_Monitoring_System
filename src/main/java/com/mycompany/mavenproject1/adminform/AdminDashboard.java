/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1.adminform;

import com.mycompany.mavenproject1.ConnectionQuery.DataHandler;
import com.mycompany.mavenproject1.ConnectionQuery.DatabaseConnector;
import com.mycompany.mavenproject1.LoginForm.Login;
import com.mycompany.mavenproject1.LoadingSplash.Logoutscreen;
import com.mycompany.mavenproject1.Mavenproject1;
import com.mycompany.mavenproject1.Option;
import static com.mycompany.mavenproject1.RegisterForm.Register2acc.validateEmail;
import static com.mycompany.mavenproject1.RegisterForm.Register2acc.validateInput;
import static com.mycompany.mavenproject1.RegisterForm.Register2acc.validateInputNoCharOrNumber;
import com.mycompany.mavenproject1.Restart;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author John Kyle G. Mistas
 */
public class AdminDashboard extends javax.swing.JFrame {
     String firstcheck,lastcheck,usercheck,passcheck,gendercheck,emailcheck,empidcheck,rolecheck,unqidcheck;
      String in,out;
       private static final String EMAIL_REGEX = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
       private static final String SPECIAL_CHARACTERS_REGEX = ".*[^a-zA-Z0-9].*";
       private JTextFieldDateEditor dateText;
    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
        displaUserData();
        displaUserDataRecord();
        updateuser.setEnabled(false);
        deleteuser.setEnabled(false);
        cancelsearch.setVisible(false);
        employeeid.setEnabled(false);
        hrswrk1.setEnabled(false);
        datetxt.setEditable(false);
        adduser.setVisible(false);
        adduserrec.setEnabled(true);
        String check = first.getText();
        first1.setText(check);
        updateuserrec.setEnabled(false);
        deleteuserrec.setEnabled(false);
        recCan.setVisible(false);
        recSrch.setVisible(false);
        dateText = (JTextFieldDateEditor) datesearch.getDateEditor();
        dateText.setEditable(false);
        updateLabel.setVisible(false);
        deleteLabel.setVisible(false);
        updRecLabel.setVisible(false);
        delRecLabel.setVisible(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
     public static boolean validateEmail(String email) {
            Pattern pattern = Pattern.compile(EMAIL_REGEX);
            Matcher matcher = pattern.matcher(email);
            return matcher.matches();
        }
        
      
    
    public static boolean validateInput(String input, int minLength) {
        // Check minimum length
        if (input.length() >= minLength) {
            return false;
        }
   
        return true;
    }
    
     public static boolean validateInputnochar(String input) {
        // Check for special characters
        if(Pattern.matches(SPECIAL_CHARACTERS_REGEX, input)) {
            return false;
        }
        
        return true;
    }
    
     public void accCheck(String unamecheck,String idcheck){
         try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM users_acc WHERE username = ? AND employeeid = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setString(1, unamecheck);
            checkStmt.setString(2, idcheck);
            ResultSet rs = checkStmt.executeQuery();

            if(rs.next()) {
                firstcheck = rs.getString("firstname");
                lastcheck = rs.getString("lastname");
                usercheck = rs.getString("username");
                passcheck = rs.getString("password");
                gendercheck = rs.getString("gender");
                emailcheck = rs.getString("email");
                empidcheck = rs.getString("employeeid");
                rolecheck = rs.getString("role");
                unqidcheck = rs.getString("id");
            } 
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
     }
     
     public void recCheck(String id,String date){
         try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM employee_record WHERE employeeid = ? AND date = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setString(1, id);
            checkStmt.setString(2, date);
            ResultSet rs = checkStmt.executeQuery();

            if(rs.next()) {
                in = rs.getString("timein");
                out = rs.getString("timeout");
                
            } 
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
     }
     
     public boolean searchId(String idcheck){
         try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM users_acc WHERE employeeid = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            
            checkStmt.setString(1, idcheck);
            ResultSet rs = checkStmt.executeQuery();

            if(rs.next()) {
                String firstcheck2 = rs.getString("firstname");
                String lastcheck2 = rs.getString("lastname");
                String usercheck2 = rs.getString("username");
                String passcheck2 = rs.getString("password");
                String gendercheck2 = rs.getString("gender");
                String emailcheck2 = rs.getString("email");
                String empidcheck2 = rs.getString("employeeid");
                String rolecheck2 = rs.getString("role");
                String unqidcheck2 = rs.getString("id");
                
                adminAccsManager.setModel(new DefaultTableModel(null,new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}));
//                
                String list[] = {firstcheck2,lastcheck2,usercheck2,passcheck2,gendercheck2,emailcheck2,empidcheck2,rolecheck2,unqidcheck2};
                DefaultTableModel tbluser = (DefaultTableModel)adminAccsManager.getModel();
                tbluser.addRow(list);
                return true;
            }else{
                return false;
            } 
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
         return false;
     }
     
     public void displaUserData(){
         adminAccsManager.getTableHeader().setResizingAllowed(false);
            adminAccsManager.getTableHeader().setReorderingAllowed(false);
            
            
            try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM users_acc ORDER by employeeid ASC";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            ResultSet rs = checkStmt.executeQuery();

            while (rs.next()) {
                String first2 = rs.getString("firstname");
                String last2 = rs.getString("lastname");
                String user = rs.getString("username");
                String pass = rs.getString("password");
                String gender = rs.getString("gender");
                 String email2 = rs.getString("email");
                 String empid = rs.getString("employeeid");
                 String role2 = rs.getString("role");
                 String unq2 = rs.getString("id");
                
                String list[] = {first2,last2,user,pass,gender,email2,empid,role2,unq2};
                DefaultTableModel tbluser = (DefaultTableModel)adminAccsManager.getModel();
                tbluser.addRow(list);

                
            } 
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
     }
     
     public void displaUserDataRecord(){
         adminAccsManagerRecord.getTableHeader().setResizingAllowed(false);
            adminAccsManagerRecord.getTableHeader().setReorderingAllowed(false);
            
            
            try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM employee_record ORDER by employeeid ASC";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            ResultSet rs = checkStmt.executeQuery();

            while (rs.next()) {
                String date = rs.getString("date");
                String in = rs.getString("timein");
                String out = rs.getString("timeout");
                String hrs = rs.getString("hoursworked");
                String empidrec = rs.getString("employeeid");
                
                
                String list[] = {date, in, out, hrs,empidrec};
                DefaultTableModel tbluserrec = (DefaultTableModel)adminAccsManagerRecord.getModel();
                tbluserrec.addRow(list);
              

            } 
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
     }
     
     public void search(){
         Date selectedDatesrc  = datesearch.getDate();
        
       
        if(selectedDatesrc == null){
            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
        }else{
            String formattedDate = formatDate(selectedDatesrc);

          
                adminAccsManagerRecord.setModel(new DefaultTableModel(null,new String[]{"Date","Time In","Time Out","Hours Worked","EmployeeId"}));   
//               
                recSrch.setVisible(false);
                recCan.setVisible(true);
//            
        
        }
     }
     
     private static String formatDate(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }
     
     public void searchDate(String date){
           
            try (Connection conn = DatabaseConnector.getConnection()) {
            
            String checkQuery = "SELECT * FROM employee_record WHERE date = ? ";
            PreparedStatement checkStmt = conn.prepareStatement(checkQuery);
            checkStmt.setString(1, date);
            ResultSet rs = checkStmt.executeQuery();

            if(rs.next()) {
                String date1 = rs.getString("date");
                String timein = rs.getString("timein");
                String timeout = rs.getString("timeout");
                String hrswrks1 = rs.getString("hoursworked");
                String empid = rs.getString("employeeid");
                
                String list[] = {date1,timein,timeout,hrswrks1,empid};
                DefaultTableModel tbluser = (DefaultTableModel)adminAccsManagerRecord.getModel();
                tbluser.addRow(list);
                
                while(rs.next()) {
                    String date2 = rs.getString("date");
                    String timein1= rs.getString("timein");
                    String timeout1 = rs.getString("timeout");
                    String hrswrk2 = rs.getString("hoursworked");
                    String empid1 = rs.getString("employeeid");

                    String list1[] = {date2,timein1,timeout1,hrswrk2,empid1};
                    DefaultTableModel tbluser1 = (DefaultTableModel)adminAccsManagerRecord.getModel();
                    tbluser1.addRow(list1);
                   
                    }
             
                
            }else{
//              
            }
                
        } catch (SQLException e) {
            e.printStackTrace();
          
        }
           
        }
     
     public void reqList2(String date) {
            try (Connection conn = DatabaseConnector.getConnection()) {
                String query = "SELECT * FROM employee_requests WHERE date = ?";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, date);
                ResultSet rs = pstmt.executeQuery();

                
                if (rs.next()){
//                    // User exists with the provided role = admin
                     String text1 = rs.getString("fullname");
                     String text2 = rs.getString("employee_id");
                     String text3 = rs.getString("request");
                     String text = text1+"  "+text2+"  "+text3;
                     requestArea.setText(text+"\n");
                     Toolkit.getDefaultToolkit().beep();
                    while (rs.next()){
                       // User exists with the provided role = admin
                        String text1_ = rs.getString("fullname");
                        String text2_ = rs.getString("employee_id");
                        String text3_ = rs.getString("request");
                        String text_ = text1_+"  "+text2_+"  "+text3_;
                        requestArea.append(text_ + "\n");
                        Toolkit.getDefaultToolkit().beep();
                        }
                }else{
                    requestArea.setVisible(false);
                    
                }
                
            } catch (SQLException e) {
                e.printStackTrace();
            }
         
           
         }
     
     public static boolean isValidTimeFormat(String timeStr) {
        String pattern = "^\\d{2}:\\d{2} [ap]m$";
        return Pattern.matches(pattern, timeStr);
    }
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender1 = new javax.swing.ButtonGroup();
        accrolebtn = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        firstname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lastname = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        adminAccsManager = new javax.swing.JTable();
        showpassadmin = new javax.swing.JCheckBox();
        searchbtn = new javax.swing.JButton();
        adduser = new javax.swing.JButton();
        updateuser = new javax.swing.JButton();
        deleteuser = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        malerdbtn = new javax.swing.JRadioButton();
        femalerdbtn = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        first = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        adminrdbtn = new javax.swing.JRadioButton();
        userrdbtn = new javax.swing.JRadioButton();
        uniqueid = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cancelsearch = new javax.swing.JButton();
        logoutadmin = new javax.swing.JToggleButton();
        moreOption = new javax.swing.JButton();
        addemp = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        employeeid = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        updateLabel = new javax.swing.JLabel();
        deleteLabel = new javax.swing.JLabel();
        addLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        moreOptionrec = new javax.swing.JButton();
        datesearch = new com.toedter.calendar.JDateChooser();
        recSrch = new javax.swing.JButton();
        recCan = new javax.swing.JButton();
        deleteuserrec = new javax.swing.JButton();
        updateuserrec = new javax.swing.JButton();
        adduserrec = new javax.swing.JButton();
        employeeid1 = new javax.swing.JTextField();
        datetxt = new javax.swing.JTextField();
        timeintxt = new javax.swing.JTextField();
        timeouttxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        hrswrk1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        dhold = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        empname = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        first1 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        adminAccsManagerRecord = new javax.swing.JTable();
        logoutadmin1 = new javax.swing.JToggleButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestArea = new javax.swing.JTextArea();
        updRecLabel = new javax.swing.JLabel();
        delRecLabel = new javax.swing.JLabel();
        clear1 = new javax.swing.JButton();
        addRecLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 0, 0, new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(null);

        jLabel28.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1GFIILOGO-1.png")); // NOI18N
        jPanel4.add(jLabel28);
        jLabel28.setBounds(10, 0, 40, 50);

        jLabel33.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel33.setText("Innovation, Inc.");
        jPanel4.add(jLabel33);
        jLabel33.setBounds(70, 20, 170, 32);

        jLabel34.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(0, 255, 102));
        jLabel34.setText("green");
        jPanel4.add(jLabel34);
        jLabel34.setBounds(60, 0, 70, 32);

        jLabel35.setFont(new java.awt.Font("Segoe UI Symbol", 1, 26)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(0, 153, 51));
        jLabel35.setText("future");
        jPanel4.add(jLabel35);
        jLabel35.setBounds(120, 0, 100, 30);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 890, 50);

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 153));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        firstname.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        firstname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        firstname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstnameFocusLost(evt);
            }
        });
        jPanel1.add(firstname);
        firstname.setBounds(110, 100, 180, 40);

        jLabel1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel1.setText("First Name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(110, 80, 110, 16);

        jLabel2.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel2.setText("Last Name");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(110, 160, 110, 16);

        lastname.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        lastname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        lastname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lastnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastnameFocusLost(evt);
            }
        });
        jPanel1.add(lastname);
        lastname.setBounds(110, 180, 180, 40);

        username.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        username.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFocusLost(evt);
            }
        });
        jPanel1.add(username);
        username.setBounds(110, 260, 180, 40);

        jLabel3.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel3.setText("UserName");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(110, 240, 110, 16);

        jLabel4.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel4.setText("Password");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(110, 320, 110, 16);

        jLabel5.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel5.setText("Gender");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(390, 80, 110, 16);

        email.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        email.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailFocusLost(evt);
            }
        });
        jPanel1.add(email);
        email.setBounds(390, 180, 180, 40);

        jLabel6.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel6.setText("Email");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(390, 160, 110, 16);

        jLabel7.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel7.setText("Employee ID");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(390, 240, 110, 16);

        jLabel8.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel8.setText("Account Role");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(390, 320, 110, 16);

        password.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        password.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        password.setEchoChar('\u0000');
        password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFocusLost(evt);
            }
        });
        jPanel1.add(password);
        password.setBounds(110, 340, 180, 40);

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Account Records", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Symbol", 1, 12))); // NOI18N
        jScrollPane1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N

        adminAccsManager.setBackground(new java.awt.Color(153, 255, 153));
        adminAccsManager.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        adminAccsManager.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        adminAccsManager.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "UserName", "Password", "Gender", "Email", "Employee ID", "Role", "Unique ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminAccsManager.setRowHeight(25);
        adminAccsManager.getTableHeader().setReorderingAllowed(false);
        adminAccsManager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminAccsManagerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(adminAccsManager);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 420, 850, 220);

        showpassadmin.setBackground(new java.awt.Color(255, 255, 255));
        showpassadmin.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        showpassadmin.setText("show password");
        showpassadmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showpassadminActionPerformed(evt);
            }
        });
        jPanel1.add(showpassadmin);
        showpassadmin.setBounds(110, 390, 130, 20);

        searchbtn.setBackground(null);
        searchbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchbtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1search.png")); // NOI18N
        searchbtn.setBorder(null);
        searchbtn.setContentAreaFilled(false);
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });
        jPanel1.add(searchbtn);
        searchbtn.setBounds(600, 10, 40, 30);

        adduser.setBackground(null);
        adduser.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        adduser.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1add-user.png")); // NOI18N
        adduser.setBorder(null);
        adduser.setContentAreaFilled(false);
        adduser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adduserActionPerformed(evt);
            }
        });
        jPanel1.add(adduser);
        adduser.setBounds(820, 180, 60, 40);

        updateuser.setBackground(new java.awt.Color(102, 255, 51));
        updateuser.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        updateuser.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1arrow.png")); // NOI18N
        updateuser.setBorder(null);
        updateuser.setContentAreaFilled(false);
        updateuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateuserActionPerformed(evt);
            }
        });
        jPanel1.add(updateuser);
        updateuser.setBounds(820, 240, 60, 50);

        deleteuser.setBackground(null);
        deleteuser.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        deleteuser.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1delete (1).png")); // NOI18N
        deleteuser.setBorder(null);
        deleteuser.setContentAreaFilled(false);
        deleteuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteuserActionPerformed(evt);
            }
        });
        jPanel1.add(deleteuser);
        deleteuser.setBounds(830, 310, 40, 40);

        search.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        search.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        jPanel1.add(search);
        search.setBounds(470, 10, 130, 30);

        malerdbtn.setBackground(new java.awt.Color(255, 255, 255));
        gender1.add(malerdbtn);
        malerdbtn.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        malerdbtn.setText("Male");
        malerdbtn.setActionCommand("Male");
        jPanel1.add(malerdbtn);
        malerdbtn.setBounds(390, 110, 60, 21);

        femalerdbtn.setBackground(new java.awt.Color(255, 255, 255));
        gender1.add(femalerdbtn);
        femalerdbtn.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        femalerdbtn.setText("Female");
        femalerdbtn.setActionCommand("Female");
        jPanel1.add(femalerdbtn);
        femalerdbtn.setBounds(390, 130, 100, 21);

        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel9.setText("WELCOME");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 10, 120, 26);

        first.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        first.setText("first");
        jPanel1.add(first);
        first.setBounds(50, 40, 160, 20);

        clear.setBackground(null);
        clear.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1cleaning.png")); // NOI18N
        clear.setBorder(null);
        clear.setContentAreaFilled(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel1.add(clear);
        clear.setBounds(560, 350, 50, 40);

        adminrdbtn.setBackground(null);
        accrolebtn.add(adminrdbtn);
        adminrdbtn.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        adminrdbtn.setText("admin");
        adminrdbtn.setActionCommand("admin");
        adminrdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminrdbtnActionPerformed(evt);
            }
        });
        jPanel1.add(adminrdbtn);
        adminrdbtn.setBounds(400, 350, 100, 21);

        userrdbtn.setBackground(null);
        accrolebtn.add(userrdbtn);
        userrdbtn.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        userrdbtn.setText("user");
        userrdbtn.setActionCommand("user");
        jPanel1.add(userrdbtn);
        userrdbtn.setBounds(400, 370, 100, 21);

        uniqueid.setEditable(false);
        uniqueid.setBackground(new java.awt.Color(255, 255, 255));
        uniqueid.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        uniqueid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        uniqueid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        jPanel1.add(uniqueid);
        uniqueid.setBounds(620, 100, 64, 40);

        jLabel10.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel10.setText("Search ID");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(500, 40, 80, 16);

        cancelsearch.setBackground(null);
        cancelsearch.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1cancel.png")); // NOI18N
        cancelsearch.setBorder(null);
        cancelsearch.setContentAreaFilled(false);
        cancelsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelsearchActionPerformed(evt);
            }
        });
        jPanel1.add(cancelsearch);
        cancelsearch.setBounds(600, 10, 40, 30);

        logoutadmin.setBackground(new java.awt.Color(204, 255, 204));
        logoutadmin.setForeground(new java.awt.Color(0, 0, 0));
        logoutadmin.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\logout (2).png")); // NOI18N
        logoutadmin.setBorder(null);
        logoutadmin.setBorderPainted(false);
        logoutadmin.setContentAreaFilled(false);
        logoutadmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutadminActionPerformed(evt);
            }
        });
        jPanel1.add(logoutadmin);
        logoutadmin.setBounds(840, 640, 30, 40);

        moreOption.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        moreOption.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1option.png")); // NOI18N
        moreOption.setBorder(null);
        moreOption.setContentAreaFilled(false);
        moreOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreOptionActionPerformed(evt);
            }
        });
        jPanel1.add(moreOption);
        moreOption.setBounds(820, 120, 60, 30);

        addemp.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1plus.png")); // NOI18N
        addemp.setBorder(null);
        addemp.setContentAreaFilled(false);
        addemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addempActionPerformed(evt);
            }
        });
        jPanel1.add(addemp);
        addemp.setBounds(830, 180, 40, 40);

        refresh.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        refresh.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1.png")); // NOI18N
        refresh.setBorder(null);
        refresh.setContentAreaFilled(false);
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jPanel1.add(refresh);
        refresh.setBounds(840, 390, 30, 30);

        employeeid.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        employeeid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        employeeid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        employeeid.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        employeeid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                employeeidFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeidFocusLost(evt);
            }
        });
        jPanel1.add(employeeid);
        employeeid.setBounds(390, 260, 190, 40);

        jButton1.setBackground(new java.awt.Color(102, 255, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(790, 10, 76, 27);

        jLabel19.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel19.setText("Logout");
        jPanel1.add(jLabel19);
        jLabel19.setBounds(830, 670, 50, 16);

        jButton3.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1off.png")); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(10, 650, 40, 40);

        updateLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        updateLabel.setText("Update");
        jPanel1.add(updateLabel);
        updateLabel.setBounds(830, 280, 43, 16);

        deleteLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        deleteLabel.setText("Delete");
        jPanel1.add(deleteLabel);
        deleteLabel.setBounds(830, 350, 37, 16);

        addLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        addLabel.setText("  Add");
        jPanel1.add(addLabel);
        addLabel.setBounds(830, 220, 30, 16);

        jTabbedPane1.addTab("User Account", jPanel1);

        jPanel2.setLayout(null);

        jLabel11.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel11.setText("WELCOME");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(10, 10, 120, 26);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jPanel3.setLayout(null);

        moreOptionrec.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        moreOptionrec.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1.png")); // NOI18N
        moreOptionrec.setBorder(null);
        moreOptionrec.setContentAreaFilled(false);
        moreOptionrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreOptionrecActionPerformed(evt);
            }
        });
        jPanel3.add(moreOptionrec);
        moreOptionrec.setBounds(820, 380, 60, 30);

        datesearch.setDateFormatString("yyyy-MM-dd");
        datesearch.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                datesearchComponentAdded(evt);
            }
        });
        datesearch.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                datesearchHierarchyChanged(evt);
            }
        });
        datesearch.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                datesearchMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                datesearchMouseMoved(evt);
            }
        });
        datesearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                datesearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                datesearchFocusLost(evt);
            }
        });
        datesearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datesearchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                datesearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                datesearchMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                datesearchMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                datesearchMouseReleased(evt);
            }
        });
        datesearch.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                datesearchInputMethodTextChanged(evt);
            }
        });
        datesearch.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datesearchPropertyChange(evt);
            }
        });
        datesearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                datesearchKeyReleased(evt);
            }
        });
        jPanel3.add(datesearch);
        datesearch.setBounds(570, 10, 20, 30);

        recSrch.setBackground(null);
        recSrch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        recSrch.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1search.png")); // NOI18N
        recSrch.setBorder(null);
        recSrch.setContentAreaFilled(false);
        recSrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recSrchActionPerformed(evt);
            }
        });
        jPanel3.add(recSrch);
        recSrch.setBounds(600, 10, 40, 30);

        recCan.setBackground(null);
        recCan.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1cancel.png")); // NOI18N
        recCan.setBorder(null);
        recCan.setContentAreaFilled(false);
        recCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recCanActionPerformed(evt);
            }
        });
        jPanel3.add(recCan);
        recCan.setBounds(600, 10, 40, 30);

        deleteuserrec.setBackground(null);
        deleteuserrec.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        deleteuserrec.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1delete (1).png")); // NOI18N
        deleteuserrec.setBorder(null);
        deleteuserrec.setContentAreaFilled(false);
        deleteuserrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteuserrecActionPerformed(evt);
            }
        });
        jPanel3.add(deleteuserrec);
        deleteuserrec.setBounds(830, 270, 40, 40);

        updateuserrec.setBackground(new java.awt.Color(102, 255, 51));
        updateuserrec.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        updateuserrec.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1arrow.png")); // NOI18N
        updateuserrec.setBorder(null);
        updateuserrec.setContentAreaFilled(false);
        updateuserrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateuserrecActionPerformed(evt);
            }
        });
        jPanel3.add(updateuserrec);
        updateuserrec.setBounds(820, 200, 60, 50);

        adduserrec.setBackground(null);
        adduserrec.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        adduserrec.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1add-user.png")); // NOI18N
        adduserrec.setBorder(null);
        adduserrec.setContentAreaFilled(false);
        adduserrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adduserrecActionPerformed(evt);
            }
        });
        jPanel3.add(adduserrec);
        adduserrec.setBounds(820, 140, 60, 40);

        employeeid1.setEditable(false);
        employeeid1.setBackground(new java.awt.Color(255, 255, 255));
        employeeid1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        employeeid1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        employeeid1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        employeeid1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(employeeid1);
        employeeid1.setBounds(380, 180, 180, 40);

        datetxt.setEditable(false);
        datetxt.setBackground(new java.awt.Color(255, 255, 255));
        datetxt.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        datetxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datetxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        datetxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(datetxt);
        datetxt.setBounds(60, 180, 180, 40);

        timeintxt.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        timeintxt.setForeground(new java.awt.Color(204, 204, 204));
        timeintxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeintxt.setText("hh:mm a/p");
        timeintxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        timeintxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timeintxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeintxtFocusLost(evt);
            }
        });
        jPanel3.add(timeintxt);
        timeintxt.setBounds(60, 280, 180, 40);

        timeouttxt.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        timeouttxt.setForeground(new java.awt.Color(204, 204, 204));
        timeouttxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeouttxt.setText("hh:mm a/p");
        timeouttxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        timeouttxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timeouttxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeouttxtFocusLost(evt);
            }
        });
        timeouttxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeouttxtActionPerformed(evt);
            }
        });
        jPanel3.add(timeouttxt);
        timeouttxt.setBounds(380, 270, 180, 40);

        jLabel12.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel12.setText("Date");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(60, 160, 110, 20);

        jLabel13.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel13.setText("Time In");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(60, 260, 110, 20);

        jLabel15.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel15.setText("Time Out");
        jPanel3.add(jLabel15);
        jLabel15.setBounds(380, 250, 110, 20);

        hrswrk1.setEditable(false);
        hrswrk1.setBackground(new java.awt.Color(255, 255, 255));
        hrswrk1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        hrswrk1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hrswrk1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        hrswrk1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(hrswrk1);
        hrswrk1.setBounds(210, 350, 210, 40);

        jLabel14.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel14.setText("Hours Worked");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(250, 330, 110, 20);

        dhold.setEditable(false);
        dhold.setBackground(new java.awt.Color(255, 255, 255));
        dhold.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dhold.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        dhold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dholdActionPerformed(evt);
            }
        });
        jPanel3.add(dhold);
        dhold.setBounds(470, 10, 100, 30);

        jButton2.setBackground(new java.awt.Color(102, 255, 51));
        jButton2.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jButton2.setText("Account");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(800, 10, 80, 27);

        jLabel16.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel16.setText("Employee Name");
        jPanel3.add(jLabel16);
        jLabel16.setBounds(250, 80, 140, 20);

        jLabel17.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel17.setText("Employee ID");
        jPanel3.add(jLabel17);
        jLabel17.setBounds(380, 160, 110, 20);

        empname.setEditable(false);
        empname.setBackground(new java.awt.Color(255, 255, 255));
        empname.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        empname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        empname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 51), 2));
        empname.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(empname);
        empname.setBounds(220, 100, 190, 40);

        jLabel18.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        jLabel18.setText("Search Date");
        jPanel3.add(jLabel18);
        jLabel18.setBounds(480, 40, 90, 20);

        first1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        first1.setText("first");
        jPanel3.add(first1);
        first1.setBounds(60, 40, 160, 20);

        jLabel24.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1GFIILOGO-1.png")); // NOI18N
        jPanel3.add(jLabel24);
        jLabel24.setBounds(280, 190, 40, 40);

        jScrollPane2.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "In/Out Records", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Symbol", 1, 12))); // NOI18N
        jScrollPane2.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N

        adminAccsManagerRecord.setBackground(new java.awt.Color(153, 255, 153));
        adminAccsManagerRecord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        adminAccsManagerRecord.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        adminAccsManagerRecord.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time In", "Time Out", "Hours Worked", "Employee ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminAccsManagerRecord.setRowHeight(25);
        adminAccsManagerRecord.getTableHeader().setReorderingAllowed(false);
        adminAccsManagerRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminAccsManagerRecordMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(adminAccsManagerRecord);
        if (adminAccsManagerRecord.getColumnModel().getColumnCount() > 0) {
            adminAccsManagerRecord.getColumnModel().getColumn(0).setResizable(false);
            adminAccsManagerRecord.getColumnModel().getColumn(1).setResizable(false);
            adminAccsManagerRecord.getColumnModel().getColumn(2).setResizable(false);
            adminAccsManagerRecord.getColumnModel().getColumn(3).setResizable(false);
            adminAccsManagerRecord.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(20, 410, 860, 230);

        logoutadmin1.setBackground(new java.awt.Color(204, 255, 204));
        logoutadmin1.setForeground(new java.awt.Color(0, 0, 0));
        logoutadmin1.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\logout (2).png")); // NOI18N
        logoutadmin1.setBorder(null);
        logoutadmin1.setBorderPainted(false);
        logoutadmin1.setContentAreaFilled(false);
        logoutadmin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutadmin1ActionPerformed(evt);
            }
        });
        jPanel3.add(logoutadmin1);
        logoutadmin1.setBounds(840, 640, 40, 40);

        jLabel20.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        jLabel20.setText("Logout");
        jPanel3.add(jLabel20);
        jLabel20.setBounds(840, 670, 50, 16);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 0)), "User Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Symbol", 1, 12))); // NOI18N

        requestArea.setEditable(false);
        requestArea.setColumns(20);
        requestArea.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        requestArea.setRows(5);
        jScrollPane3.setViewportView(requestArea);

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(560, 70, 240, 100);

        updRecLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        updRecLabel.setText("update");
        jPanel3.add(updRecLabel);
        updRecLabel.setBounds(830, 240, 40, 16);

        delRecLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        delRecLabel.setText("Delete");
        jPanel3.add(delRecLabel);
        delRecLabel.setBounds(830, 310, 50, 16);

        clear1.setBackground(null);
        clear1.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1cleaning.png")); // NOI18N
        clear1.setBorder(null);
        clear1.setContentAreaFilled(false);
        clear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear1ActionPerformed(evt);
            }
        });
        jPanel3.add(clear1);
        clear1.setBounds(550, 340, 50, 40);

        addRecLabel.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        addRecLabel.setText("  Add");
        jPanel3.add(addRecLabel);
        addRecLabel.setBounds(830, 180, 40, 16);

        jPanel2.add(jPanel3);
        jPanel3.setBounds(0, 0, 890, 720);

        jTabbedPane1.addTab("Employee Record", jPanel2);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 20, 890, 800);

        setSize(new java.awt.Dimension(901, 780));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void adminAccsManagerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminAccsManagerMouseClicked
        // TODO add your handling code here:
        addemp.setEnabled(false);
        addLabel.setVisible(false);
        updateuser.setEnabled(true);
        deleteuser.setEnabled(true);
        adduserrec.setEnabled(true);
          updateLabel.setVisible(true);
        deleteLabel.setVisible(true);
        int i = adminAccsManager.getSelectedRow();
        TableModel model = adminAccsManager.getModel();
        firstname.setText(model.getValueAt(i, 0).toString());
        lastname.setText(model.getValueAt(i, 1).toString());
        username.setText(model.getValueAt(i, 2).toString());
        password.setText(model.getValueAt(i, 3).toString());
        String sex = model.getValueAt(i, 4).toString();
            if(sex.equals("Male")){
                malerdbtn.setSelected(true);
                
            }else{
                 femalerdbtn.setSelected(true);
            }
        email.setText(model.getValueAt(i, 5).toString());
        employeeid.setText(model.getValueAt(i, 6).toString());
         String accRole = model.getValueAt(i, 7).toString();
            if(accRole.equals("admin")){
                adminrdbtn.setSelected(true);
                
            }else{
                 userrdbtn.setSelected(true);
            }
        uniqueid.setText(model.getValueAt(i, 8).toString());
    }//GEN-LAST:event_adminAccsManagerMouseClicked

    private void showpassadminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showpassadminActionPerformed
        // TODO add your handling code here:
        if (showpassadmin.isSelected()) {
//                    passwordText.setEchoChar('*');
                    password.setEchoChar((char) 0);
                } else {
                    password.setEchoChar('*');

                }
    }//GEN-LAST:event_showpassadminActionPerformed

    private void deleteuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteuserActionPerformed
        // TODO add your handling code here:
        String idh = employeeid.getText();
        String name = first.getText();
        String delname = firstname.getText();
        String dellast = lastname.getText();
        
         int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Delete " + delname + " "+ dellast + " ?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
         String checkname = DataHandler.delaccusingid(idh);
        if( con == JOptionPane.YES_OPTION){
            if(checkname.equals(name)){
                String id = uniqueid.getText();
                String empid = employeeid.getText();
                int idInt = Integer.parseInt(id);
                DataHandler.delAcc(idInt);
                DataHandler.delAccRec(empid);
                DataHandler.delAllEmer(empid);
                dispose();
                Logoutscreen logout = new Logoutscreen();
                Login log = new Login();
                Addrec rec = new Addrec();
                ConfirmIdChange conid = new ConfirmIdChange();
                Idchange idchg = new Idchange();

                 Thread countdownThread = new Thread(() -> {
                    int ctr = 4;
                    while (ctr >= 0) {
;
                        try {
                            Thread.sleep(1000);
                            } catch (InterruptedException e) {
                            }
                            ctr--;
                        }
        //                            JOptionPane.showMessageDialog(null, "Warning Time Complete! Please Login Correct Details");
                                logout.setVisible(false);
                                log.setVisible(true);
                                rec.dispose();
                                conid.dispose();
                                idchg.dispose();
                            });
                         logout.setVisible(true);
                         countdownThread.start();
//            
             }else{
                String id = uniqueid.getText();
                String empid = employeeid.getText();
                int idInt = Integer.parseInt(id);
                DataHandler.delAcc(idInt);
                DataHandler.delAccRec(empid);
                DataHandler.delAllEmer(empid);
                firstname.setText("");
                lastname.setText("");
                username.setText("");
                password.setText("");
                gender1.clearSelection();
                email.setText("");
                employeeid.setText("");
                accrolebtn.clearSelection();
                uniqueid.setText("");
                updateuser.setEnabled(false);
                deleteuser.setEnabled(false);
                updateLabel.setVisible(false);
                deleteLabel.setVisible(false);
                addemp.setEnabled(true);
                adduser.setVisible(false);
                addLabel.setVisible(true);
 
                DefaultTableModel model = new DefaultTableModel(null, new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; // Make all cells uneditable
                    }
                };

                adminAccsManager.setModel(model);
                displaUserData();
         }
        }else{
             JOptionPane.showMessageDialog(null, "Delete Unsuccessfull!","Warning",JOptionPane.ERROR_MESSAGE);
        }
          
    }//GEN-LAST:event_deleteuserActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        addemp.setEnabled(true);
        adduser.setVisible(false);
        addLabel.setVisible(true);
        addemp.setVisible(true);
        updateuser.setEnabled(false);
        deleteuser.setEnabled(false);
        employeeid.setEnabled(false);
        updateLabel.setVisible(false);
        deleteLabel.setVisible(false);
        firstname.setText("");
        lastname.setText("");
        username.setText("");
        password.setText("");
        gender1.clearSelection();
        email.setText("");
        employeeid.setText("");
        accrolebtn.clearSelection();
        uniqueid.setText("");
        
    }//GEN-LAST:event_clearActionPerformed

    private void updateuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateuserActionPerformed
        // TODO add your handling code here:
        String user = username.getText();
        String password1 = password.getText();
        String email1 = email.getText();
        String first1 = firstname.getText();
        String last1 = lastname.getText();
        String empid = employeeid.getText();
        String nqid = uniqueid.getText();
        int nqidInt = Integer.parseInt(nqid);

        String genderidentity = gender1.getSelection().getActionCommand();
        String accrole = accrolebtn.getSelection().getActionCommand();

        if (user.equals("") && password1.equals("")&& email1.equals("") && first1.equals("") && last1.equals("") && empid.equals("") && !malerdbtn.isSelected() && !femalerdbtn.isSelected() && !adminrdbtn.isSelected() && !userrdbtn.isSelected() ) {
            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
           
        }else if (first1.equals("")){
            JOptionPane.showMessageDialog(null,"Required First Name","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (last1.equals("")){
            JOptionPane.showMessageDialog(null,"Required Last Name","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (user.equals("")){
            JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (password1.equals("")) {
            JOptionPane.showMessageDialog(null,"Required Password","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (!malerdbtn.isSelected() && !femalerdbtn.isSelected()){
            JOptionPane.showMessageDialog(null,"Gender Required","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (email1.equals("")){
            JOptionPane.showMessageDialog(null,"Required Email","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (empid.equals("")){
            JOptionPane.showMessageDialog(null,"Please Enter Eployee ID","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (!adminrdbtn.isSelected() && !userrdbtn.isSelected()){
            JOptionPane.showMessageDialog(null,"Please Enter Eployee ID","Warning",JOptionPane.ERROR_MESSAGE);

        }else {
            
            accCheck(user,empid);
            if(user.equals(usercheck) && password1.equals(passcheck) && first1.equals(firstcheck) && last1.equals(lastcheck) && genderidentity.equals(gendercheck) && email1.equals(emailcheck) && empid.equals(empidcheck) && accrole.equals(rolecheck)){
                JOptionPane.showMessageDialog(null, "No Update Changes","Warning",JOptionPane.ERROR_MESSAGE);
            }else{
                int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Update?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if( con == JOptionPane.YES_OPTION){
                    boolean isExist = DataHandler.adminUpdate(user,password1,first1,last1,genderidentity,email1,empid, accrole,nqidInt);
                    if(isExist){
                        DataHandler.adminUpdate(user,password1,first1,last1,genderidentity,email1,empid, accrole,nqidInt);
                        JOptionPane.showMessageDialog(null, "Update Changed. ","Message",JOptionPane.INFORMATION_MESSAGE);
                         DefaultTableModel model = new DefaultTableModel(null, new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}) {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false; // Make all cells uneditable
                            }
                        };

                        adminAccsManager.setModel(model);
                        displaUserData();
                        
                        String newuser = DataHandler.newname(empid);

                        first.setText(newuser);

                        
                        

                    }else{
                        JOptionPane.showMessageDialog(null, "Data Not Existed","Warning",JOptionPane.ERROR_MESSAGE);
                     
                     
                }
            }else{
                     JOptionPane.showMessageDialog(null, "Update Unsuccessfull","Warning",JOptionPane.ERROR_MESSAGE);
                }
               
            }
        }
    }//GEN-LAST:event_updateuserActionPerformed

    private void adminrdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminrdbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adminrdbtnActionPerformed

    private void adduserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adduserActionPerformed
        // TODO add your handling code here:
        String user = username.getText();
        String password1 = password.getText();
        String email1 = email.getText();
        String first1 = firstname.getText();
        String last1 = lastname.getText();
        String empid = employeeid.getText();
        String nqid = uniqueid.getText();
        int minLength = 8;
       
        if (user.equals("Add Username") && password1.equals("Add Password") && email1.equals("Add Email") &&first1.equals("Add Firstname") && last1.equals("Add Lastname") &&!malerdbtn.isSelected() && !femalerdbtn.isSelected()&& empid.equals("Enter Employee ID") && !adminrdbtn.isSelected() && !userrdbtn.isSelected() ) {
            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
           
        }else if (first1.equals("") || first1.equals("Add Firstname")){
            JOptionPane.showMessageDialog(null,"Required First Name","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (last1.equals("") || last1.equals("Add Lastname")){
            JOptionPane.showMessageDialog(null,"Required Last Name","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (user.equals("") || user.equals("Add Username")){
            JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (password1.equals("") || password1.equals("Add Password")) {
            JOptionPane.showMessageDialog(null,"Required Password","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (!malerdbtn.isSelected() && !femalerdbtn.isSelected()){
            JOptionPane.showMessageDialog(null,"Gender Required","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (email1.equals("") || email1.equals("Add Email")){
            JOptionPane.showMessageDialog(null,"Required Email","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (empid.equals("") || empid.equals("Enter Employee ID")){
            JOptionPane.showMessageDialog(null,"Please Enter Eployee ID","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (!adminrdbtn.isSelected() && !userrdbtn.isSelected()){
            JOptionPane.showMessageDialog(null,"Please Account Role","Warning",JOptionPane.ERROR_MESSAGE);

        }else if (!validateInputnochar(user)) {
             JOptionPane.showMessageDialog(null, "Username contains special characters and is invalid.","Warning",JOptionPane.ERROR_MESSAGE);
        
        }else if (validateInput(user, minLength)) {
             JOptionPane.showMessageDialog(null, "Invalid Username Minimum 8 character","Warning",JOptionPane.ERROR_MESSAGE);
        
        }else if (!validateEmail(email1)) {
             JOptionPane.showMessageDialog(null, "Email is invalid.","Warning",JOptionPane.ERROR_MESSAGE);
        
        }else {
             String genderidentity = gender1.getSelection().getActionCommand();
             String accrole = accrolebtn.getSelection().getActionCommand();
             boolean isExist = DataHandler.registerUser(user,password1,first1,last1,genderidentity,email1,empid, accrole);
                if(isExist){
                    JOptionPane.showMessageDialog(null, "Username Exists Already","Warning",JOptionPane.ERROR_MESSAGE);
                }
                else {
                    adduser.setVisible(false);
                    addemp.setVisible(true);
                    employeeid.setEnabled(false);
                    updateuser.setEnabled(false);
                    deleteuser.setEnabled(false);
                    firstname.setText("");
                    lastname.setText("");
                    username.setText("");
                    password.setText("");
                    gender1.clearSelection();
                    email.setText("");
                    employeeid.setText("");
                    accrolebtn.clearSelection();
                    uniqueid.setText("");
                    JOptionPane.showMessageDialog(null, "Account Registered Successfully. ","Message",JOptionPane.INFORMATION_MESSAGE);
                    DataHandler.registerUser(user,password1,first1,last1,genderidentity,email1,empid, accrole);
//                    
                    DefaultTableModel model = new DefaultTableModel(null, new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}) {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false; // Make all cells uneditable
                            }
                        };

                        adminAccsManager.setModel(model);
                        displaUserData();
                }
        }
            
    }//GEN-LAST:event_adduserActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        // TODO add your handling code here:
        
        String holdSearch = search.getText();
        boolean srchExist = searchId(holdSearch);
        if(holdSearch.equals("")){
            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
        }else{
            if(srchExist){
                searchId(holdSearch);
                searchbtn.setVisible(false);
                cancelsearch.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null,"ID Not Found","Warning",JOptionPane.ERROR_MESSAGE);
                search.setText("");
            }
        } 
        
        
    }//GEN-LAST:event_searchbtnActionPerformed

    private void cancelsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelsearchActionPerformed
        // TODO add your handling code here:
        searchbtn.setVisible(true);
        cancelsearch.setVisible(false);
        search.setText("");

        DefaultTableModel model = new DefaultTableModel(null, new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells uneditable
                }
            };

                        adminAccsManager.setModel(model);
                        displaUserData();
        
    }//GEN-LAST:event_cancelsearchActionPerformed

    private void logoutadminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutadminActionPerformed
        // TODO add your handling code here:
        dispose();
        Logoutscreen logout = new Logoutscreen();
        Login log = new Login();
        Addrec rec = new Addrec();
        ConfirmIdChange conid = new ConfirmIdChange();
        Idchange idchg = new Idchange();
        
         Thread countdownThread = new Thread(() -> {
                                         int ctr = 4;
                                    while (ctr >= 0) {
//                                SwingUtilities.invokeLater(() -> countersec.setText(Integer.toString(countdown)));
                                try {
                                    Thread.sleep(1000);
                                } catch (InterruptedException e) {
                                }
                                ctr--;
                            }

                            logout.setVisible(false);
                            log.setVisible(true);
                            rec.dispose();
                            conid.dispose();
                            idchg.dispose();
                        });
                        logout.setVisible(true);
                        countdownThread.start();
                        
    

    }//GEN-LAST:event_logoutadminActionPerformed

    private void moreOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreOptionActionPerformed
        // TODO add your handling code here:
        Option opt =  new Option();
        opt.setVisible(true);
//        dispose();

    }//GEN-LAST:event_moreOptionActionPerformed

    private void clear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear1ActionPerformed
        // TODO add your handling code here:
        datetxt.setText("");
        timeintxt.setText("");
        timeouttxt.setText("");
        hrswrk1.setText("");
        employeeid1.setText("");
        empname.setText("");
        adduserrec.setEnabled(true);
        addRecLabel.setVisible(true);
        updateuserrec.setEnabled(false);
        deleteuserrec.setEnabled(false);
        updRecLabel.setVisible(false);
        delRecLabel.setVisible(false);
        
        
    }//GEN-LAST:event_clear1ActionPerformed

    private void deleteuserrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteuserrecActionPerformed
        // TODO add your handling code here:
         String idhold3 = employeeid1.getText();
         String datehold = datetxt.getText();
         String name = empname.getText();
         
        int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Record of " + name + " ?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if( con == JOptionPane.YES_OPTION){
           
            DataHandler.delAccRecOne(idhold3,datehold);
            DataHandler.delEmergency(idhold3, datehold);
            datetxt.setText("");
            timeintxt.setText("");
            timeouttxt.setText("");
            hrswrk1.setText("");
            employeeid1.setText("");
            empname.setText("");
            adduserrec.setEnabled(true);
            updateuserrec.setEnabled(false);
            deleteuserrec.setEnabled(false);
            adduserrec.setEnabled(true);
            addRecLabel.setVisible(true);
            updRecLabel.setVisible(false);
            delRecLabel.setVisible(false);
            DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells uneditable
                }
            };

            adminAccsManagerRecord.setModel(model);
            displaUserDataRecord();

        }else{
            JOptionPane.showMessageDialog(null, "Delete Unsuccessfull!","Warning",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_deleteuserrecActionPerformed

    private void updateuserrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateuserrecActionPerformed
        // TODO add your handling code here:
        String datehold = datetxt.getText();
        String timeinhold = timeintxt.getText();
        String timeouthold = timeouttxt.getText();
        String employeeidhold = employeeid1.getText();
//        String hrhold = datetxt.getText();
        
         
            if(datehold.equals("") && timeinhold.equals("") && timeouthold.equals("")){
                JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
            }else if(datehold.equals("")){
                JOptionPane.showMessageDialog(null,"Please Input Date","Warning",JOptionPane.ERROR_MESSAGE);
            }else if(timeinhold.equals("")){
                JOptionPane.showMessageDialog(null,"Please Input Time In","Warning",JOptionPane.ERROR_MESSAGE);
            }else if(timeouthold.equals("")){
                JOptionPane.showMessageDialog(null,"Please Input Time Out","Warning",JOptionPane.ERROR_MESSAGE);
            }else if(timeinhold.equals("LEAVE") || timeinhold.equals("EMERGENCY") || timeouthold.equals("EMERGENCY") || timeouthold.equals("LEAVE")){
               int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Update?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if( con == JOptionPane.YES_OPTION){
                   boolean Exist = DataHandler.UpdateRec("EMERGENCY","LEAVE","EMERGENCY",datehold,employeeidhold);
                   if(Exist){
                       DataHandler.UpdateRec("EMERGENCY","LEAVE","EMERGENCY",datehold,employeeidhold);
                       JOptionPane.showMessageDialog(null,"Update Recorded","Message",JOptionPane.INFORMATION_MESSAGE);
                       hrswrk1.setText("EMERGENCY");
                       DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false; // Make all cells uneditable
                            }
                        };

                                adminAccsManagerRecord.setModel(model);
                                displaUserDataRecord();


                           }
                        }else{
                             JOptionPane.showMessageDialog(null,"Canceled Updating","Message",JOptionPane.INFORMATION_MESSAGE);
                        }

            }else if (!isValidTimeFormat(timeinhold) || !isValidTimeFormat(timeouthold) ) {
                JOptionPane.showMessageDialog(null,"Please Indicate the formatted 'hh:mm a' ","Warning",JOptionPane.ERROR_MESSAGE);
                
//          
            }else{
                

                    recCheck(employeeidhold,datehold);
                    if(timeinhold.equals(in) && timeouthold.equals(out) ){
                        JOptionPane.showMessageDialog(null,"No Update Changes","Message",JOptionPane.INFORMATION_MESSAGE);
                    }else{
                       DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");

                        LocalTime timeIn = LocalTime.parse(timeinhold.toLowerCase(), formatter);
                        LocalTime timeOut = LocalTime.parse(timeouthold.toLowerCase(), formatter);

                        // If timeOut is before timeIn or they are equal, add a day to timeOut
                        if (timeOut.isBefore(timeIn) || timeOut.equals(timeIn) ) {
                            timeOut = timeOut.plus(Duration.ofDays(1));
                            timeOut = timeOut.plus(Duration.ofHours(12));
                            
                            Duration duration = Duration.between(timeIn, timeOut);

                        long totalHours = duration.toHours();

                        // Convert long to int using a cast operator
                        int hrsAbs = (int) totalHours;
                        

                        // Get the absolute value
                        int absoluteValue = Math.abs(hrsAbs) + 12;
                        String totalHourString = String.valueOf(absoluteValue);

                         int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Update?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                        if( con == JOptionPane.YES_OPTION){
                           boolean Exist = DataHandler.UpdateRec(timeinhold,timeouthold,totalHourString,datehold,employeeidhold);
                           if(Exist){
                               DataHandler.UpdateRec(timeinhold,timeouthold,totalHourString,datehold,employeeidhold);
                               JOptionPane.showMessageDialog(null,"Update Recorded","Message",JOptionPane.INFORMATION_MESSAGE);
                               hrswrk1.setText(totalHourString);

                               DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                                    @Override
                                    public boolean isCellEditable(int row, int column) {
                                        return false; // Make all cells uneditable
                                    }
                                };

                                adminAccsManagerRecord.setModel(model);
                                displaUserDataRecord();


                           }
                        }else{
                             JOptionPane.showMessageDialog(null,"Canceled Updating","Message",JOptionPane.INFORMATION_MESSAGE);
                        }
                    }else{

                        Duration duration = Duration.between(timeIn, timeOut);

                        long totalHours = duration.toHours();

                        // Convert long to int using a cast operator
                        int hrsAbs = (int) totalHours;
                        

                        // Get the absolute value
                        int absoluteValue = Math.abs(hrsAbs);
                        String totalHourString = String.valueOf(absoluteValue);

                         int con = JOptionPane.showConfirmDialog(null, "Are You Sure, You want to Update?","messsage",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                       if( con == JOptionPane.YES_OPTION){
                           boolean Exist = DataHandler.UpdateRec(timeinhold,timeouthold,totalHourString,datehold,employeeidhold);
                           if(Exist){
                               DataHandler.UpdateRec(timeinhold,timeouthold,totalHourString,datehold,employeeidhold);
                               JOptionPane.showMessageDialog(null,"Update Recorded","Message",JOptionPane.INFORMATION_MESSAGE);
                               hrswrk1.setText(totalHourString);

                               DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                                    @Override
                                    public boolean isCellEditable(int row, int column) {
                                        return false; // Make all cells uneditable
                                    }
                                };

                                adminAccsManagerRecord.setModel(model);
                                displaUserDataRecord();


                           }
                       }else{
                            JOptionPane.showMessageDialog(null,"Canceled Updating","Message",JOptionPane.INFORMATION_MESSAGE);
                       }
                   }
                }
            }
    }//GEN-LAST:event_updateuserrecActionPerformed

    private void adduserrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adduserrecActionPerformed
        // TODO add your handling code here:
        Addrec rec = new Addrec();
        rec.setVisible(true);
    }//GEN-LAST:event_adduserrecActionPerformed

    private void adminAccsManagerRecordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminAccsManagerRecordMouseClicked
        // TODO add your handling code here:
        
        adduserrec.setEnabled(false);
        addRecLabel.setVisible(false);
        updateuserrec.setEnabled(true);
        deleteuserrec.setEnabled(true);
        updRecLabel.setVisible(true);
        delRecLabel.setVisible(true);
        timeintxt.setForeground(Color.BLACK);
        timeouttxt.setForeground(Color.BLACK);
        int i = adminAccsManagerRecord.getSelectedRow();
        TableModel model = adminAccsManagerRecord.getModel();
        datetxt.setText(model.getValueAt(i, 0).toString());
        timeintxt.setText(model.getValueAt(i, 1).toString());
        timeouttxt.setText(model.getValueAt(i, 2).toString());
        hrswrk1.setText(model.getValueAt(i, 3).toString());
        employeeid1.setText(model.getValueAt(i, 4).toString());
        String idh = employeeid1.getText();
        String recname =  DataHandler.recordname(idh);
        empname.setText(recname);
        
    }//GEN-LAST:event_adminAccsManagerRecordMouseClicked

    private void moreOptionrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreOptionrecActionPerformed
        // TODO add your handling code here:
       DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells uneditable
                }
            };

            adminAccsManagerRecord.setModel(model);
            displaUserDataRecord();
        
    }//GEN-LAST:event_moreOptionrecActionPerformed

    private void recSrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recSrchActionPerformed
        // TODO add your handling code here:
//       Date selectedDatesrc  = datesearch.getDate();
//        
//       
//        if(selectedDatesrc == null){
//            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
//        }else{
//            String formattedDate = formatDate(selectedDatesrc);
////            JOptionPane.showMessageDialog(null,formattedDate);
//          
//                adminAccsManagerRecord.setModel(new DefaultTableModel(null,new String[]{"Date","Time In","Time Out","Hours Worked","EmployeeId"}));   
////                adminAccsManagerRecord.setEnabled(false);
////                DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
////                    @Override
////                    public boolean isCellEditable(int row, int column) {
////                        return false; // Make all cells uneditable
////                    }
////                };
//                searchDate(formattedDate);
//                recSrch.setVisible(false);
//                recCan.setVisible(true);
////            }else{
////                JOptionPane.showMessageDialog(null,"No Record Found","Warning",JOptionPane.ERROR_MESSAGE);
////                datesearch.setDate(null);
////            }
//        
//        }
        
    }//GEN-LAST:event_recSrchActionPerformed

    private void recCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recCanActionPerformed
        // TODO add your handling code here:

        recCan.setVisible(false);

        dhold.setText("");
        dateText.setText(""); 
        
//       
        DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make all cells uneditable
            }
        };

adminAccsManagerRecord.setModel(model);
displaUserDataRecord();

    }//GEN-LAST:event_recCanActionPerformed

    private void datesearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseClicked
        // TODO add your handling code here:
        Date selectedDatesrc  = datesearch.getDate();
        dateText.setText(null);
        
       
        if(selectedDatesrc == null){
            JOptionPane.showMessageDialog(null,"Empty Input","Warning",JOptionPane.ERROR_MESSAGE);
        }else{
            String formattedDate = formatDate(selectedDatesrc);
            JOptionPane.showMessageDialog(null,formattedDate);
//            
//        
        }
        
    }//GEN-LAST:event_datesearchMouseClicked

    private void addempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addempActionPerformed
        // TODO add your handling code here:
//        showpassadmin.setSelected(true);
        firstname.setText("Add Firstname");
        lastname.setText("Add Lastname");
        username.setText("Add Username");
        password.setText("Add Password");
        email.setText("Add Email");
        employeeid.setText("Enter Employee ID");
        employeeid.setEnabled(true);
        adduser.setVisible(true);
        addemp.setVisible(false);
        
        
        
    }//GEN-LAST:event_addempActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
//      
            DefaultTableModel model = new DefaultTableModel(null, new String[]{"First Name","Last Name","UserName","Password","Gender","Email","Employee ID", "Role","Unique ID"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells uneditable
                }
            };

                        adminAccsManager.setModel(model);
                        displaUserData();
        
    }//GEN-LAST:event_refreshActionPerformed

    private void logoutadmin1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutadmin1ActionPerformed
        // TODO add your handling code here:
        dispose();
        Logoutscreen logout = new Logoutscreen();
        Login log = new Login();
         Thread countdownThread = new Thread(() -> {
                                         int ctr = 4;
                                    while (ctr >= 0) {

                                try {
                                    Thread.sleep(1000);
                                } catch (InterruptedException e) {
                                }
                                ctr--;
                            }
//                           
                            logout.setVisible(false);
                            log.setVisible(true);
                            
                        });
                        logout.setVisible(true);
                        countdownThread.start();
                        
    }//GEN-LAST:event_logoutadmin1ActionPerformed

    private void timeouttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeouttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeouttxtActionPerformed

    private void datesearchPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datesearchPropertyChange
        // TODO add your handling code here:
//       
            
            datesearch.addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("date".equals(evt.getPropertyName())) {
                            Date selectedDate = (Date) evt.getNewValue();
                            // Perform the desired action with the selected date
//                         
                            Date selectedDatesrc  = dateText.getDate();
                            String formattedDate = formatDate(selectedDatesrc);
          
                            dhold.setText(formattedDate);
       
//                         
                                    adminAccsManagerRecord.setModel(new DefaultTableModel(null,new String[]{"Date","Time In","Time Out","Hours Worked","EmployeeId"}));   
                    //               
                                        searchDate(formattedDate);
                                        

                                         
                                        recCan.setVisible(true);
//                                    
//      
                        }
//                         
                    }
                });

    }//GEN-LAST:event_datesearchPropertyChange

    private void dholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dholdActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dholdActionPerformed

    private void datesearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseReleased
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMouseReleased

    private void datesearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseExited
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMouseExited

    private void datesearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseEntered
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMouseEntered

    private void datesearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMousePressed
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMousePressed

    private void datesearchInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_datesearchInputMethodTextChanged
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchInputMethodTextChanged

    private void datesearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datesearchFocusLost
        // TODO add your handling code here:
       
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchFocusLost

    private void datesearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_datesearchFocusGained
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchFocusGained

    private void datesearchHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_datesearchHierarchyChanged
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchHierarchyChanged

    private void datesearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datesearchKeyReleased
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchKeyReleased

    private void datesearchMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseMoved
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMouseMoved

    private void datesearchMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesearchMouseDragged
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchMouseDragged

    private void datesearchComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_datesearchComponentAdded
        // TODO add your handling code here:
//        Date selectedDatesrc  = datesearch.getDate();
//        String formattedDate = formatDate(selectedDatesrc);
//        dhold.setText(formattedDate);
    }//GEN-LAST:event_datesearchComponentAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Date currentTime = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String dd = sdf.format(currentTime);
        
        reqList2(dd);
        jTabbedPane1.setSelectedIndex(1);
        String newuser =first.getText();

        first1.setText(newuser);
        
         DefaultTableModel model = new DefaultTableModel(null, new String[]{"Date", "Time In", "Time Out", "Hours Worked", "EmployeeId"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells uneditable
                }
            };

            adminAccsManagerRecord.setModel(model);
            displaUserDataRecord();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void timeintxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeintxtFocusGained
        // TODO add your handling code here:
        if(timeintxt.getText().equals("hh:mm a/p")){
            timeintxt.setText(null);
            timeintxt.requestFocus();
            timeintxt.setForeground(Color.BLACK);
            
        }
    }//GEN-LAST:event_timeintxtFocusGained

    private void timeintxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeintxtFocusLost
        // TODO add your handling code here:
        if(timeintxt.getText().length()==0){
            timeintxt.setForeground(Color.LIGHT_GRAY);
            timeintxt.setText("hh:mm a/p");
        }
    }//GEN-LAST:event_timeintxtFocusLost

    private void timeouttxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeouttxtFocusGained
        // TODO add your handling code here:
        if(timeouttxt.getText().equals("hh:mm a/p")){
            timeouttxt.setText(null);
            timeouttxt.requestFocus();
            timeouttxt.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_timeouttxtFocusGained

    private void timeouttxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeouttxtFocusLost
        // TODO add your handling code here:
        if(timeouttxt.getText().length()==0){
            timeouttxt.setForeground(Color.LIGHT_GRAY);
            timeouttxt.setText("hh:mm a/p");
        }
    }//GEN-LAST:event_timeouttxtFocusLost

    private void firstnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstnameFocusGained
        // TODO add your handling code here:
        if(firstname.getText().equals("Add Firstname")){
            firstname.setText(null);
            firstname.requestFocus();
        }
    }//GEN-LAST:event_firstnameFocusGained

    private void firstnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstnameFocusLost
        // TODO add your handling code here:
         if(firstname.getText().length()==0){
            firstname.setText("Add Firstname");
        }
    }//GEN-LAST:event_firstnameFocusLost

    private void lastnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastnameFocusGained
        // TODO add your handling code here:
         if(lastname.getText().equals("Add Lastname")){
            lastname.setText(null);
            lastname.requestFocus();
        }
    }//GEN-LAST:event_lastnameFocusGained

    private void lastnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastnameFocusLost
        // TODO add your handling code here:
         if(lastname.getText().length()==0){
            lastname.setText("Add Lastname");
        }
    }//GEN-LAST:event_lastnameFocusLost

    private void usernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusGained
        // TODO add your handling code here:
        if(username.getText().equals("Add Username")){
            username.setText(null);
            username.requestFocus();
        }
    }//GEN-LAST:event_usernameFocusGained

    private void usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusLost
        // TODO add your handling code here:
         if(username.getText().length()==0){
            username.setText("Add Username");
        }
    }//GEN-LAST:event_usernameFocusLost

    private void passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusGained
        // TODO add your handling code here:
        if (showpassadmin.isSelected()) {
//                    passwordText.setEchoChar('*');
                    password.setEchoChar((char) 0);
                } 
        if(password.getText().equals("Add Password")){
            password.setText(null);
            password.requestFocus();
            password.setEchoChar('*');
        }
    }//GEN-LAST:event_passwordFocusGained

    private void passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusLost
        // TODO add your handling code here:
        if(password.getText().length()==0){
            password.setText("Add Password");
//             showpass.setVisible(false);
//             hidePass.setVisible(false);
            password.setEchoChar((char)0);
        }
    }//GEN-LAST:event_passwordFocusLost

    private void emailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFocusGained
        // TODO add your handling code here:
         if(email.getText().equals("Add Email")){
            email.setText(null);
            email.requestFocus();
        }
    }//GEN-LAST:event_emailFocusGained

    private void emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFocusLost
        // TODO add your handling code here:
        if(email.getText().length()==0){
            email.setText("Add Email");
        }
    }//GEN-LAST:event_emailFocusLost

    private void employeeidFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeidFocusGained
        // TODO add your handling code here:
        if( employeeid.getText().equals("Enter Employee ID")){
            employeeid.setText(null);
            employeeid.requestFocus();
        }
    }//GEN-LAST:event_employeeidFocusGained

    private void employeeidFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeidFocusLost
        // TODO add your handling code here:
        if(employeeid.getText().length()==0){
            employeeid.setText("Enter Employee ID");
        }
    }//GEN-LAST:event_employeeidFocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int result = JOptionPane.showConfirmDialog(null, "Do you want to Restart System?", "Confirmation", JOptionPane.YES_NO_OPTION);

                // Check the user's choice
        if (result == JOptionPane.YES_OPTION) {
            dispose();
            Restart resTart = new Restart();
            Addrec rec = new Addrec();
            ConfirmIdChange conid = new ConfirmIdChange();
            Idchange idchg = new Idchange();
             Thread countdownThread = new Thread(() -> {
            int ctr = 4;
            while (ctr >= 0) {

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                }
                ctr--;
             }

            resTart.doSomething();

            });
                rec.dispose();
                conid.dispose();
                idchg.dispose();
                countdownThread.start();
        }else{
             // User clicked "No" or closed the dialog
               JOptionPane.showMessageDialog(null, "Canceled.", "Notification", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.ButtonGroup accrolebtn;
    private javax.swing.JLabel addLabel;
    private javax.swing.JLabel addRecLabel;
    private javax.swing.JButton addemp;
    public javax.swing.JButton adduser;
    public javax.swing.JButton adduserrec;
    private javax.swing.JTable adminAccsManager;
    private javax.swing.JTable adminAccsManagerRecord;
    public javax.swing.JRadioButton adminrdbtn;
    private javax.swing.JButton cancelsearch;
    public javax.swing.JButton clear;
    public javax.swing.JButton clear1;
    private com.toedter.calendar.JDateChooser datesearch;
    public javax.swing.JTextField datetxt;
    private javax.swing.JLabel delRecLabel;
    private javax.swing.JLabel deleteLabel;
    public javax.swing.JButton deleteuser;
    public javax.swing.JButton deleteuserrec;
    private javax.swing.JTextField dhold;
    public javax.swing.JTextField email;
    public javax.swing.JTextField employeeid;
    public javax.swing.JTextField employeeid1;
    private javax.swing.JTextField empname;
    public javax.swing.JRadioButton femalerdbtn;
    public javax.swing.JLabel first;
    public javax.swing.JLabel first1;
    public javax.swing.JTextField firstname;
    public javax.swing.ButtonGroup gender1;
    public javax.swing.JTextField hrswrk1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTextField lastname;
    private javax.swing.JToggleButton logoutadmin;
    private javax.swing.JToggleButton logoutadmin1;
    public javax.swing.JRadioButton malerdbtn;
    public javax.swing.JButton moreOption;
    public javax.swing.JButton moreOptionrec;
    public javax.swing.JPasswordField password;
    private javax.swing.JButton recCan;
    private javax.swing.JButton recSrch;
    public javax.swing.JButton refresh;
    public javax.swing.JTextArea requestArea;
    private javax.swing.JTextField search;
    private javax.swing.JButton searchbtn;
    private javax.swing.JCheckBox showpassadmin;
    public javax.swing.JTextField timeintxt;
    public javax.swing.JTextField timeouttxt;
    public javax.swing.JTextField uniqueid;
    private javax.swing.JLabel updRecLabel;
    private javax.swing.JLabel updateLabel;
    public javax.swing.JButton updateuser;
    public javax.swing.JButton updateuserrec;
    public javax.swing.JTextField username;
    public javax.swing.JRadioButton userrdbtn;
    // End of variables declaration//GEN-END:variables
}
