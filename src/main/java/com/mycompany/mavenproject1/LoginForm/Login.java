package com.mycompany.mavenproject1.LoginForm;


import com.mycompany.mavenproject1.ConnectionQuery.DataHandler;
import com.mycompany.mavenproject1.ExitSplash;
import com.mycompany.mavenproject1.LoadingSplash.Loginscreen;
import com.mycompany.mavenproject1.RegisterForm.Register2acc;
import com.mycompany.mavenproject1.UserDash.UserDashboard;
import com.mycompany.mavenproject1.adminform.Addrec;
import com.mycompany.mavenproject1.adminform.AdminDashboard;
import com.mycompany.mavenproject1.adminform.ConfirmIdChange;
import com.mycompany.mavenproject1.adminform.Idchange;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.font.TextAttribute;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.border.Border;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author John Kyle G. Mistas
 */
public class Login extends javax.swing.JFrame {
     int countdown = 60;
      Border bred = BorderFactory.createLineBorder(Color.RED);
      Border bnorm = BorderFactory.createLineBorder(Color.gray);
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        //hiding Jlabel for attempt pusposes
        pleasewait.setVisible(false);
        countersec.setVisible(false);
        seconds.setVisible(false);
        error.setVisible(false);
        showPassLog.setVisible(false);
        
        
    }
    
    // Method to convert the integer day of the week to a string representation
    private static String getDayOfWeekAsString(int dayOfWeek) {
        switch (dayOfWeek) {
            case Calendar.SUNDAY:
                return "Sunday";
            case Calendar.MONDAY:
                return "Monday";
            case Calendar.TUESDAY:
                return "Tuesday";
            case Calendar.WEDNESDAY:
                return "Wednesday";
            case Calendar.THURSDAY:
                return "Thursday";
            case Calendar.FRIDAY:
                return "Friday";
            case Calendar.SATURDAY:
                return "Saturday";
            default:
                return "Unknown";
        }
    }
    
    // Method to get a random word from the array of choices
    public static String randomWordChoice(String[] choices) {
        
        
        // Create a Random object
        Random random = new Random();

        // Get the length of the choices array
        int numChoices = choices.length;

        // Generate a random index within the range of the array
        int randomIndex = random.nextInt(numChoices);

        // Get the random word from the array and return it
        return choices[randomIndex];
    }
    //declaring variable for attempt purposes
    String check;
   int counter = 3;
   
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        userText = new javax.swing.JTextField();
        exitbtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        passwordText = new javax.swing.JPasswordField();
        showPassLog = new javax.swing.JCheckBox();
        empidText = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        clearbtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        loginuser = new javax.swing.JButton();
        loginPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        register = new javax.swing.JButton();
        pleasewait = new javax.swing.JLabel();
        countersec = new javax.swing.JLabel();
        seconds = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        forgotbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel2.setText("jLabel2");

        jLabel4.setBackground(new java.awt.Color(102, 255, 255));
        jLabel4.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("Login");

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login Account");
        setBackground(new java.awt.Color(0, 153, 153));
        setBounds(new java.awt.Rectangle(0, 0, 400, 300));
        getContentPane().setLayout(null);

        userText.setBackground(null);
        userText.setFont(new java.awt.Font("Segoe UI Symbol", 3, 12)); // NOI18N
        userText.setForeground(new java.awt.Color(0, 102, 0));
        userText.setText("UserName");
        userText.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        userText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                userTextFocusLost(evt);
            }
        });
        userText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextActionPerformed(evt);
            }
        });
        getContentPane().add(userText);
        userText.setBounds(310, 140, 200, 30);

        exitbtn.setBackground(new java.awt.Color(242, 242, 242));
        exitbtn.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        exitbtn.setForeground(new java.awt.Color(204, 0, 0));
        exitbtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\2logout.png")); // NOI18N
        exitbtn.setBorder(null);
        exitbtn.setBorderPainted(false);
        exitbtn.setContentAreaFilled(false);
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        getContentPane().add(exitbtn);
        exitbtn.setBounds(500, 0, 40, 40);

        jLabel9.setBackground(new java.awt.Color(102, 255, 255));
        jLabel9.setFont(new java.awt.Font("Sitka Text", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 204, 51));
        jLabel9.setText("LOGIN");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(340, 80, 121, 40);

        passwordText.setBackground(null);
        passwordText.setFont(new java.awt.Font("Segoe UI Symbol", 3, 12)); // NOI18N
        passwordText.setForeground(new java.awt.Color(0, 102, 0));
        passwordText.setText("Password");
        passwordText.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        passwordText.setCaretColor(new java.awt.Color(153, 255, 102));
        passwordText.setEchoChar('\u0000');
        passwordText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordTextFocusLost(evt);
            }
        });
        passwordText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextActionPerformed(evt);
            }
        });
        getContentPane().add(passwordText);
        passwordText.setBounds(310, 260, 200, 30);

        showPassLog.setBackground(null);
        showPassLog.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        showPassLog.setText("show password");
        showPassLog.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showPassLogItemStateChanged(evt);
            }
        });
        showPassLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassLogActionPerformed(evt);
            }
        });
        getContentPane().add(showPassLog);
        showPassLog.setBounds(310, 300, 130, 20);

        empidText.setBackground(null);
        empidText.setFont(new java.awt.Font("Segoe UI Symbol", 3, 12)); // NOI18N
        empidText.setForeground(new java.awt.Color(0, 102, 0));
        empidText.setText("Employee ID");
        empidText.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        empidText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                empidTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                empidTextFocusLost(evt);
            }
        });
        empidText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empidTextActionPerformed(evt);
            }
        });
        getContentPane().add(empidText);
        empidText.setBounds(310, 200, 200, 30);

        error.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        error.setForeground(new java.awt.Color(255, 0, 0));
        error.setText("asdfg");
        getContentPane().add(error);
        error.setBounds(360, 410, 160, 16);

        clearbtn.setBackground(null);
        clearbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clearbtn.setForeground(new java.awt.Color(0, 51, 0));
        clearbtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1cleaning.png")); // NOI18N
        clearbtn.setBorder(null);
        clearbtn.setContentAreaFilled(false);
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });
        getContentPane().add(clearbtn);
        clearbtn.setBounds(470, 310, 60, 40);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Login");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(320, 380, 40, 20);

        loginuser.setBackground(null);
        loginuser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        loginuser.setForeground(new java.awt.Color(51, 51, 0));
        loginuser.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1login (3).png")); // NOI18N
        loginuser.setBorder(null);
        loginuser.setContentAreaFilled(false);
        loginuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginuserActionPerformed(evt);
            }
        });
        getContentPane().add(loginuser);
        loginuser.setBounds(310, 330, 50, 50);

        loginPanel.setBackground(new java.awt.Color(255, 255, 255));
        loginPanel.setForeground(new java.awt.Color(153, 0, 0));
        loginPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPanelMouseClicked(evt);
            }
        });
        loginPanel.setLayout(null);

        jLabel6.setBackground(new java.awt.Color(10, 10, 10));
        jLabel6.setForeground(new java.awt.Color(10, 10, 10));
        jLabel6.setLabelFor(jLabel6);
        jLabel6.setMaximumSize(new java.awt.Dimension(50, 50));
        loginPanel.add(jLabel6);
        jLabel6.setBounds(6, 91, 0, 0);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Don't Have an Account?");
        loginPanel.add(jLabel5);
        jLabel5.setBounds(70, 310, 149, 15);

        register.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        register.setForeground(new java.awt.Color(0, 204, 51));
        register.setText("SignUp");
        register.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerActionPerformed(evt);
            }
        });
        loginPanel.add(register);
        register.setBounds(100, 330, 70, 24);

        pleasewait.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        pleasewait.setForeground(new java.awt.Color(255, 0, 0));
        pleasewait.setText("Please Wait :");
        loginPanel.add(pleasewait);
        pleasewait.setBounds(60, 400, 80, 14);

        countersec.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        countersec.setText("10");
        loginPanel.add(countersec);
        countersec.setBounds(140, 400, 20, 14);

        seconds.setFont(new java.awt.Font("Segoe UI Emoji", 0, 12)); // NOI18N
        seconds.setText("second(s)");
        loginPanel.add(seconds);
        seconds.setBounds(160, 400, 60, 14);

        jLabel7.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\3GFIILOGO-1.png")); // NOI18N
        loginPanel.add(jLabel7);
        jLabel7.setBounds(30, 30, 210, 210);

        jLabel15.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 255, 102));
        jLabel15.setText("green");
        loginPanel.add(jLabel15);
        jLabel15.setBounds(60, 240, 70, 32);

        jLabel16.setFont(new java.awt.Font("Segoe UI Symbol", 1, 26)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 153, 51));
        jLabel16.setText("future");
        loginPanel.add(jLabel16);
        jLabel16.setBounds(120, 240, 100, 30);

        jLabel17.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel17.setText("Innovation, Inc.");
        loginPanel.add(jLabel17);
        jLabel17.setBounds(70, 260, 170, 32);

        getContentPane().add(loginPanel);
        loginPanel.setBounds(0, 0, 270, 460);

        forgotbtn.setBackground(null);
        forgotbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        forgotbtn.setForeground(new java.awt.Color(0, 102, 255));
        forgotbtn.setText("Forgot Password?");
        forgotbtn.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 102, 255)));
        forgotbtn.setContentAreaFilled(false);
        forgotbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotbtnActionPerformed(evt);
            }
        });
        getContentPane().add(forgotbtn);
        forgotbtn.setBounds(420, 380, 120, 20);

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\John Kyle G. Mistas\\Downloads\\1GFIILOGO-1.png")); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(380, 30, 40, 40);

        setSize(new java.awt.Dimension(564, 470));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void userTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextActionPerformed
        // TODOh add your handling code here:
        loginuser.doClick();
    }//GEN-LAST:event_userTextActionPerformed

    private void loginuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginuserActionPerformed
        // TODO add your handling code here:
        String[] wordChoices = {"""
                    "Trust, respect, collaboration - 
                     a successful team's foundation"
                """
                , """
                  "Great leaders inspire greatness."
            """
                , """
                "Treat employees like family, 
                      see them excel."
            """
                ,"""
                 "Individuals build the team; the 
                    team empowers individuals."
                 """
                , """
                "Appreciate your employees, 
                  unlock their potential."
                  ""","""
                "Positive work environment =
                  creativity and productivity."
              ""","""
            "Empower your team, flourish together."
                  ""","""
            "Leadership is caring, not just controlling."
            ""","""
                "Invest in employees, success reciprocates."
                    ""","""
            "Lead by example, witness your team's growth."
                ""","""
            "Listen, solve workplace challenges effectively."
            ""","""
            "Celebrate small victories, 
                achieve big goals."
            ""","""
            "Teamwork makes dreams a reality." 
                ""","""
            "Encourage innovation, watch ideas soar."
                ""","""
            "Effort deserves acknowledgment, 
                          motivation follows."
                            ""","""
        "The best leaders bring out greatness in others."
                        """,
                    """
            "Valued employees are invaluable assets."
                            """,
                    """
              "Recognize hard work, inspire excellence."
                    """,
                    """
            "Positive attitude spreads, 
               strengthens the team."
                """,
                """
            "Empower others to become leaders."
                    """};

        // Call the randomWordChoice method to get the randomly selected word
        String randomWord = randomWordChoice(wordChoices);
        
        String user = userText.getText();
        String password = passwordText.getText();
        String idtext = empidText.getText();
                    
            if (user.equals("UserName") && password.equals("Password") && idtext.equals("Employee ID")) {
                    userText.setBorder(bred);
                    passwordText.setBorder(bred);
                     empidText.setBorder(bred);
                    error.setText("Empty Input");
                    error.setVisible(true);
                   
                }else if (user.equals("") && password.equals("") && idtext.equals("")) {
                    userText.setBorder(bred);
                    passwordText.setBorder(bred);
                    empidText.setBorder(bred);
                    error.setText("Empty Input");
                    error.setVisible(true);
                   
                }else if (user.equals("")){
                    passwordText.setBorder(bnorm);
                    empidText.setBorder(bnorm);
                    userText.setBorder(bred);
                    error.setText("Required UserName");
                    error.setVisible(true);
//                    JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.INFORMATION_MESSAGE);
                   
                }else if (user.equals("UserName")){
                    passwordText.setBorder(bnorm);
                    empidText.setBorder(bnorm);
                    userText.setBorder(bred);
                    error.setText("Required UserName");
                    error.setVisible(true);
//                    JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.INFORMATION_MESSAGE);
                   
                }else if (idtext.equals("")){
                    empidText.setBorder(bred);
                    passwordText.setBorder(bnorm);
                    userText.setBorder(bnorm);
                    error.setText("Required Employee ID");
                    error.setVisible(true);
//                    JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.INFORMATION_MESSAGE);
                   
                }else if (idtext.equals("Employee ID")){
                    empidText.setBorder(bred);
                    passwordText.setBorder(bnorm);
                    userText.setBorder(bnorm);
                    error.setText("Required Employee ID");
                    error.setVisible(true);
//                    JOptionPane.showMessageDialog(null,"Required UserName","Warning",JOptionPane.INFORMATION_MESSAGE);
                   
                }else if (password.equals("")) {
                    empidText.setBorder(bnorm);
                    userText.setBorder(bnorm);
                     passwordText.setBorder(bred);
                    error.setText("Required Password");
                    error.setVisible(true);
//                   JOptionPane.showMessageDialog(null,"Required Password","Warning",JOptionPane.INFORMATION_MESSAGE);
                }else if (password.equals("Password")) {
                    empidText.setBorder(bnorm);
                    userText.setBorder(bnorm);
                     passwordText.setBorder(bred);
                    error.setText("Required Password");
                    error.setVisible(true);
//                   JOptionPane.showMessageDialog(null,"Required Password","Warning",JOptionPane.INFORMATION_MESSAGE);
                }else {
                    if(user.contains(" ")){
                        JOptionPane.showMessageDialog(null,"Username can't contain space ","Warning",JOptionPane.ERROR_MESSAGE);
                    }else if(idtext.contains(" ")){
                        JOptionPane.showMessageDialog(null,"Employee Id can't contain space ","Warning",JOptionPane.ERROR_MESSAGE);
                    }else if(password.contains(" ")){
                        JOptionPane.showMessageDialog(null,"Password Id can't contain space ","Warning",JOptionPane.ERROR_MESSAGE);
                    }else{
                        boolean isValid = DataHandler.loginUser(user,password,idtext);
                        // Create a new Date instance to get the current date and time together of converting it.
                        Date currentTime = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        String dd = sdf.format(currentTime);
                        
                        if(isValid){
                            userText.setBorder(bnorm);
                            passwordText.setBorder(bnorm);
                            empidText.setBorder(bnorm);
//                            String reqList = DataHandler.reqList(dd);
//                            String req2 = DataHandler.reqList2(dd);
                            boolean isAdmin = DataHandler.checkAccount(user);
                            if(isAdmin){
                                Toolkit.getDefaultToolkit().beep();
                                dispose();
    //                            JOptionPane.showMessageDialog(null,"Welcome");
                                check = DataHandler.welcomeUser(user);
//                                check1 = DataHandler.welcomeUserlast(user);
                                AdminDashboard dashadmin = new AdminDashboard();

                                dashadmin.first.setText(check);
//                                dashadmin.last.setText(check1);
                                dashadmin.first1.setText(check);
//                                dashadmin.last1.setText(check1);
                                Loginscreen log = new Loginscreen();

                                 Thread countdownThread = new Thread(() -> {
                                             int ctr = 4;
                                        while (ctr >= 0) {
    //                                SwingUtilities.invokeLater(() -> countersec.setText(Integer.toString(countdown)));
                                    try {
                                        Thread.sleep(1000);
                                    } catch (InterruptedException e) {
                                    }
                                    ctr--;
                                }
    //                            JOptionPane.showMessageDialog(null, "Warning Time Complete! Please Login Correct Details");
                                log.setVisible(false);
                                
//                                dashadmin.requestArea.setText(reqList);
//                                dashadmin.requestArea.setText(dashadmin.requestArea.getText()+ "\n"+ req2);
                                dashadmin.setVisible(true);

                            });
                            log.loadF.setText(check);
//                            log.loadL.setText(check1);
                            log.role.setText("(Admin)");
                            log.qoUtes.setText(randomWord);
                            log.setVisible(true);
                            countdownThread.start();


                            }else{
                                Toolkit.getDefaultToolkit().beep();
                                String checkgen = DataHandler.gendercheck(user);
    //                            String checker = JOptionPane.showInputDialog(this, "input Employee to Proceed! ","Confirm",JOptionPane.QUESTION_MESSAGE);
                                UserDashboard dash =  new UserDashboard();
                                Loginscreen log = new Loginscreen();
                                
                                
                                
                                // Create a Calendar instance and set it to the current date and time
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(currentTime);
                                
                                // Get the day of the week as an integer (Sunday = 1, Monday = 2, ..., Saturday = 7)
                                int daysOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
                                        
                                // Convert the integer day of the week to a string representation
                                String dayOfWeekString = getDayOfWeekAsString(daysOfWeek);
                                
                                if(dayOfWeekString.equals("Sunday")){
                                    JOptionPane.showMessageDialog(null, "Today is Sunday, No Work Today!","Green Future Innovation Inc.",JOptionPane.INFORMATION_MESSAGE);
                                    dash.timein.setEnabled(false);
                                    dash.in.setEnabled(false);
                                    dash.endTime.setEnabled(false);
                                    dash.out.setEnabled(false);
                                    dash.saver.setEnabled(false);
                                    dash.leavebtn.setEnabled(false);
                                }else{
//                                    JOptionPane.showMessageDialog(null, "Today is not Sunday,Work Today!","Green Future Innovation Inc.",JOptionPane.INFORMATION_MESSAGE);
                                    String val = "1";
                                    String paramcheck = DataHandler.idCheker(user);
                                    String savercheck = DataHandler.savercheck(dd,paramcheck);
                                    String leavecheck = DataHandler.leavecheck(dd,paramcheck);
                                    String toutExist = DataHandler.toutExist(dd,paramcheck);
                                    String toutExistdb = "-";
                                    String gender = DataHandler.profileGender(paramcheck);
                                    String email = DataHandler.profileEmail(paramcheck);
                                    String usern1 = DataHandler.profileUser(paramcheck);
                                    check = DataHandler.welcomeUser(user);
                                    boolean leavecheckExist = DataHandler.leavebtncheck(dd,paramcheck);
    //                                boolean checkin = DataHandler.leavechecktimein(dd,paramcheck);
    //                                check1 = DataHandler.welcomeUserlast(user);
                                    if(checkgen.equals("Female")){
                                        dash.logoboy.setVisible(false);
                                        dash.logogirl.setVisible(true);
                                    }else{
                                        dash.logoboy.setVisible(true);
                                        dash.logogirl.setVisible(false);
                                    }
                                    if (paramcheck.equals(idtext)){
                                        String setting = DataHandler.setUp(idtext,dd);
                                        if(dd.equals(setting)){

                                            dash.idHolder.setText(paramcheck);
                                            dash.idHolder.setEnabled(false);
    //                                        dash.first.setText(check);
    //                                        dash.last.setText(check1);


                                            dash.firstprof.setText(check);
    //                                        dash.lastprof.setText(check1);
                                            dash.gen.setText(gender);
                                            dash.mail.setText(email);
                                            dash.usern.setText(usern1);
                                            dash.idprof.setText(paramcheck);


                                    Thread countdownThread = new Thread(() -> {
                                        int ctr = 4;
                                   while (ctr >= 0) {
        //                                SwingUtilities.invokeLater(() -> countersec.setText(Integer.toString(countdown)));
                                        try {
                                            Thread.sleep(1000);
                                        } catch (InterruptedException e) {
                                        }
                                        ctr--;
                                            }
                //                            

                                            log.setVisible(false);
                                            dash.setVisible(true);

                                        });
                                            log.loadF.setText(check);
            //                                log.loadL.setText(check1);
                                            log.role.setText("(User)");
                                            log.qoUtes.setText(randomWord);
                                            log.setVisible(true);
                                            countdownThread.start();


                                            dash.timein.setEnabled(false);
                                            dash.timein.setText("Already In!");
                                            dash.in.setVisible(false);
                                            

                                            if(val.equals(savercheck)){
                                                dash.saver.setEnabled(false);
                                            }else{
                                                dash.saver.setEnabled(true);
                                            }

                                            if(leavecheckExist){
                                                dash.leavebtn.setEnabled(false);

                                            }else{
                                                dash.leavebtn.setEnabled(true);
                                                if(val.equals(leavecheck)){
                                                dash.leavebtn.setEnabled(false);
                                                }else{
                                                dash.leavebtn.setEnabled(true);
                                            }
                                            }

                                            if(toutExistdb.equals(toutExist)){
                                                dash.endTime.setEnabled(true);

                                                dash.out.setVisible(true);
                                            }else{
                                                dash.endTime.setEnabled(false);
                                                dash.endTime.setText("Already Out!");
                                                dash.out.setVisible(false);
                                            }
                                             dispose();
                                             dash.displaUserData(paramcheck);
                                        }else{
                                            Toolkit.getDefaultToolkit().beep();
                                            check = DataHandler.welcomeUser(user);
    //                                        check1 = DataHandler.welcomeUserlast(user);
                                            dash.idHolder.setText(paramcheck);
                                            dash.idHolder.setEnabled(false);
                                            dash.timein.setEnabled(true);
                                            dash.in.setVisible(true);
    //                                        dash.first.setText(check);
    //                                        dash.last.setText(check1);

                                            dash.firstprof.setText(check);
    //                                        dash.lastprof.setText(check1);
                                            dash.gen.setText(gender);
                                            dash.mail.setText(email);
                                            dash.usern.setText(usern1);
                                            dash.idprof.setText(paramcheck);

                                            Thread countdownThread = new Thread(() -> {
                                                 int ctr = 3;
                                            while (ctr >= 0) {
        //                                SwingUtilities.invokeLater(() -> countersec.setText(Integer.toString(countdown)));
                                        try {
                                            Thread.sleep(1000);
                                                } catch (InterruptedException e) {
                                                }
                                                ctr--;
                                            }
                //                            JOptionPane.showMessageDialog(null, "Warning Time Complete! Please Login Correct Details");
                                            log.setVisible(false);
                                            dash.setVisible(true);

                                        });
                                            log.loadF.setText(check);
            //                                log.loadL.setText(check1);
                                            log.role.setText("(User)");    
                                            log.qoUtes.setText(randomWord);
                                            log.setVisible(true);
                                            countdownThread.start();

        //                       
                                            if(val.equals(savercheck)){
                                                dash.saver.setEnabled(false);
                                            }else{
                                                dash.saver.setEnabled(true);
                                            }
                                            if(leavecheckExist){
                                                if(val.equals(leavecheck)){
                                                dash.leavebtn.setEnabled(false);
                                                }else{
                                                dash.leavebtn.setEnabled(true);
                                            }

                                            }else{
                                                  dash.leavebtn.setEnabled(true);
                                            }

                                            if(toutExistdb.equals(toutExist)){
                                                dash.endTime.setEnabled(true);
                                                dash.out.setVisible(true);
                                            }else{
                                                dash.endTime.setEnabled(false);
                                                dash.endTime.setText("Already Out!");
                                                dash.out.setVisible(false);
                                            }
                                            dispose();
                                             dash.displaUserData(paramcheck);


                                        }

                                    }else{
                                        JOptionPane.showMessageDialog(this, "Sorry, Can't Proceed","Warning",JOptionPane.ERROR_MESSAGE);
                                    }
                                } 
                            }
                        }else{
                            
                            passwordText.setBorder(bred);
                            userText.setBorder(bred);
                            empidText.setBorder(bred);
                            counter --;
                            error.setVisible(false);
                            JOptionPane.showMessageDialog(null,"Invalid Input" , "Last " + counter + " attempt",JOptionPane.ERROR_MESSAGE);


                            if(counter == 0){
                               JOptionPane.showMessageDialog(null,"You reached three maximum attempts","Login Failed",JOptionPane.ERROR_MESSAGE);

                               Thread countdownThread = new Thread(() -> {

                                while (countdown >= 0) {
                                    SwingUtilities.invokeLater(() -> countersec.setText(Integer.toString(countdown)));
                                    try {
                                        Thread.sleep(1000);
                                    } catch (InterruptedException e) {
                                    }
                                    countdown--;
                                }
    //                            JOptionPane.showMessageDialog(null, "Warning Time Complete! Please Login Correct Details");
                                userText.setEnabled(true);
                                passwordText.setEnabled(true);
                                empidText.setEnabled(true);
                                exitbtn.setEnabled(true);
                                userText.setBorder(bnorm);
                                passwordText.setBorder(bnorm);
                                empidText.setBorder(bnorm);
                                userText.setText("");
                                passwordText.setText("");
                                empidText.setText("");
//                                exitbtn.setEnabled(true);
                                pleasewait.setVisible(false);
                                countersec.setVisible(false);
                                seconds.setVisible(false);
                                exitbtn.setEnabled(true);
                                loginuser.setEnabled(true);
                                clearbtn.setEnabled(true);
                                forgotbtn.setEnabled(true);
                                register.setEnabled(true);
                                counter = 3;
                            });

                            countdownThread.start();
    //                        userText.setText("");
    //                         passwordText.setText("");
                            pleasewait.setVisible(true);
                            countersec.setVisible(true);
                            seconds.setVisible(true);
                               userText.setEnabled(false);
                               passwordText.setEnabled(false);
                               exitbtn.setEnabled(false);
                               loginuser.setEnabled(false);
                               empidText.setEnabled(false);
                               clearbtn.setEnabled(false);
                               forgotbtn.setEnabled(false);
                               register.setEnabled(false);



                        }  

    //                        break;
                        }
                    }
                }
            
            
                
            
    }//GEN-LAST:event_loginuserActionPerformed

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbtnActionPerformed
        // TODO add your handling code here:
        userText.setBorder(bnorm);
        passwordText.setBorder(bnorm);
        empidText.setBorder(bnorm);
        userText.setText("UserName");
        passwordText.setText("Password");
        empidText.setText("Employee ID");
        error.setVisible(true);
        passwordText.setEchoChar((char) 0);
        
    }//GEN-LAST:event_clearbtnActionPerformed

    private void showPassLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassLogActionPerformed
        // TODO add your handling code here:
        if (showPassLog.isSelected()) {
//                    passwordText.setEchoChar('*');
                    passwordText.setEchoChar((char) 0);
                } else {
                    passwordText.setEchoChar('*');

                }
        
    }//GEN-LAST:event_showPassLogActionPerformed

    private void showPassLogItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showPassLogItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_showPassLogItemStateChanged

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        // TODO add your handling code here:
//       ChooseLogin backLog = new ChooseLogin();
//       backLog.setVisible(true);
        int result = JOptionPane.showConfirmDialog(null, "Do you want to Quit?", "Confirmation", JOptionPane.YES_NO_OPTION);

                // Check the user's choice
        if (result == JOptionPane.YES_OPTION) {
            dispose();
            ExitSplash splash = new ExitSplash();
           
             Thread countdownThread = new Thread(() -> {
            int ctr = 2;
            while (ctr >= 0) {

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                }
                ctr--;
             }

            splash.doSomething();

            });
               
                countdownThread.start();
        }else{
             // User clicked "No" or closed the dialog
               JOptionPane.showMessageDialog(null, "Canceled.", "Notification", JOptionPane.WARNING_MESSAGE);
        }
      
    }//GEN-LAST:event_exitbtnActionPerformed

    private void userTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userTextFocusGained
        // TODO add your handling code here:
        Border bnorm = BorderFactory.createLineBorder(Color.gray);
        userText.setBorder(bnorm);
        error.setText("");
        if(userText.getText().equals("UserName")){
            userText.setText(null);
            userText.requestFocus();
        }
    }//GEN-LAST:event_userTextFocusGained

    private void userTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userTextFocusLost
//         TODO add your handling code here:
        if(userText.getText().length()==0){
            userText.setText("UserName");
        }
    }//GEN-LAST:event_userTextFocusLost

    private void empidTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_empidTextFocusGained
        // TODO add your handling code here:
        Border bnorm = BorderFactory.createLineBorder(Color.gray);
        empidText.setBorder(bnorm);
        error.setText("");
        if(empidText.getText().equals("Employee ID")){
            empidText.setText(null);
            empidText.requestFocus();
        }
    }//GEN-LAST:event_empidTextFocusGained

    private void empidTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_empidTextFocusLost
        // TODO add your handling code here:
         if(empidText.getText().length()==0){
            empidText.setText("Employee ID");
        }
    }//GEN-LAST:event_empidTextFocusLost

    private void passwordTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFocusLost
        //         TODO add your handling code here:
        showPassLog.setVisible(false);
        if(passwordText.getText().length()==0){
            passwordText.setText("Password");
//             showpass.setVisible(false);
//             hidePass.setVisible(false);
            passwordText.setEchoChar((char)0);
        }
    }//GEN-LAST:event_passwordTextFocusLost

    private void passwordTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFocusGained
        // TODO add your handling code here:
        Border bnorm = BorderFactory.createLineBorder(Color.gray);
        passwordText.setBorder(bnorm);
        error.setText("");
        showPassLog.setVisible(true);
        
         if (showPassLog.isSelected()) {
//                    passwordText.setEchoChar('*');
                    passwordText.setEchoChar((char) 0);
                } 
        if(passwordText.getText().equals("Password")){
            passwordText.setText(null);
            passwordText.requestFocus();
            passwordText.setEchoChar('*');
        }
    }//GEN-LAST:event_passwordTextFocusGained

    private void loginPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_loginPanelMouseClicked

    private void forgotbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotbtnActionPerformed
        // TODO add your handling code here:
        dispose();
        ConfirmForgot cForm = new ConfirmForgot();
        cForm.setVisible(true);

    }//GEN-LAST:event_forgotbtnActionPerformed

    private void registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerActionPerformed
        // TODO add your handling code here:
        
        dispose();
        Register2acc newLog = new Register2acc();
        newLog.setVisible(true);
        //            Splashreg open = new Splashreg();
        //            open.setVisible(true);

    }//GEN-LAST:event_registerActionPerformed

    private void passwordTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextActionPerformed
        // TODO add your handling code here:
        loginuser.doClick();
        if (showPassLog.isSelected()) {
//                    passwordText.setEchoChar('*');
                    passwordText.setEchoChar((char) 0);
                } else {
                    passwordText.setEchoChar('*');

                }
    }//GEN-LAST:event_passwordTextActionPerformed

    private void empidTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empidTextActionPerformed
        // TODO add your handling code here:
         loginuser.doClick();
    }//GEN-LAST:event_empidTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public void Login1() {
        /* Set the Nimbus look and feel */
     
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearbtn;
    private javax.swing.JLabel countersec;
    private javax.swing.JTextField empidText;
    private javax.swing.JLabel error;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton forgotbtn;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    public javax.swing.JPanel loginPanel;
    private javax.swing.JButton loginuser;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JLabel pleasewait;
    private javax.swing.JButton register;
    private javax.swing.JLabel seconds;
    private javax.swing.JCheckBox showPassLog;
    public javax.swing.JTextField userText;
    // End of variables declaration//GEN-END:variables

    private void setEchoChar(char c) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    
}
